const { GoogleGenerativeAI } = require('@google/generative-ai');
const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

/**
 * Script para probar la conexi√≥n con Gemini
 */
async function testGeminiConnection() {
  console.log('üîç Probando conexi√≥n con Gemini...\n');

  try {
    // Buscar configuraci√≥n de Gemini del tenant
    const tenantId = 'b88fa541-4d93-4f16-a707-95e70f7eecdc'; // Empresa Demo

    console.log(`üìã Buscando configuraci√≥n de Gemini para tenant: ${tenantId}`);

    const config = await prisma.ai_provider_configs.findUnique({
      where: {
        tenantId_provider: {
          tenantId,
          provider: 'gemini'
        }
      }
    });

    if (!config) {
      console.error('‚ùå No se encontr√≥ configuraci√≥n de Gemini para este tenant');
      console.log('\nüí° Soluci√≥n: Configura una API key en /ia-config');
      return;
    }

    console.log(`‚úÖ Configuraci√≥n encontrada`);
    console.log(`   Modelo: ${config.modelo}`);
    console.log(`   Activo: ${config.activo}`);

    // Desencriptar API key (necesitar√°s el m√©todo decrypt del servicio)
    const crypto = require('crypto');
    const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;

    if (!ENCRYPTION_KEY) {
      console.error('‚ùå ENCRYPTION_KEY no est√° configurada en .env');
      return;
    }

    const [ivHex, authTagHex, encryptedData] = config.apiKeyEncrypted.split(':');
    const iv = Buffer.from(ivHex, 'hex');
    const authTag = Buffer.from(authTagHex, 'hex');
    const encrypted = Buffer.from(encryptedData, 'hex');

    const decipher = crypto.createDecipheriv('aes-256-gcm', Buffer.from(ENCRYPTION_KEY, 'hex'), iv);
    decipher.setAuthTag(authTag);

    let apiKey = decipher.update(encrypted, null, 'utf8');
    apiKey += decipher.final('utf8');

    console.log(`üîë API Key (primeros 15 chars): ${apiKey.substring(0, 15)}...`);
    console.log(`üîë API Key (√∫ltimos 10 chars): ...${apiKey.substring(apiKey.length - 10)}`);

    // Intentar llamada simple a Gemini
    console.log('\nüåê Intentando llamar a Gemini API...');

    const genAI = new GoogleGenerativeAI(apiKey);
    const model = genAI.getGenerativeModel({ model: config.modelo || 'gemini-1.5-flash-latest' });

    const result = await model.generateContent('Di "Hola" en JSON con formato: {"mensaje": "Hola"}');
    const response = result.response;
    const text = response.text();

    console.log('‚úÖ ¬°Respuesta recibida de Gemini!');
    console.log(`üì• Respuesta: ${text}`);

    console.log('\n‚úÖ ¬°La API key de Gemini funciona correctamente!');

  } catch (error) {
    console.error('\n‚ùå Error:', error.message);
    console.error('\nüìã Detalles del error:');
    console.error(error);

    if (error.message.includes('fetch failed')) {
      console.error('\nüåê Posibles causas del error "fetch failed":');
      console.error('   1. Sin conexi√≥n a Internet desde el servidor');
      console.error('   2. API Key inv√°lida o expirada');
      console.error('   3. Firewall/Proxy bloqueando salida a generativelanguage.googleapis.com');
      console.error('   4. Gemini no disponible en tu regi√≥n/pa√≠s');
      console.error('   5. Problema temporal del servicio de Google');
      console.error('\nüí° Prueba verificar:');
      console.error('   - ¬øEl servidor tiene acceso a Internet?');
      console.error('   - ¬øLa API key es v√°lida? Verifica en https://aistudio.google.com/app/apikey');
      console.error('   - ¬øEst√°s en un pa√≠s donde Gemini est√° disponible?');
    }
  } finally {
    await prisma.$disconnect();
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  testGeminiConnection()
    .then(() => {
      console.log('\n‚úÖ Test completado\n');
      process.exit(0);
    })
    .catch((e) => {
      console.error('\n‚ùå Error fatal:', e);
      process.exit(1);
    });
}

module.exports = { testGeminiConnection };
